#+options: toc:nil author:nil title:nil num:nil

* Syntax
#+begin_example
  o ‚àà ùïÜ, the set of operations
  n ‚àà ‚Ñï, the set of names
  c ‚àà ‚ÑÇ, the set of constants

  e = v                     (Literals)
    | e‚ÇÅ e‚ÇÇ                 (Application)
    | n                     (Variables)
    | do o e                (Operation Invocations)
    | interpreter H: e      (Effect Interpreters)
    | handler H: e          (Effect Handlers)
    | shallow H: e          (Shallow Interpreters)
    | runner H: e           (Effect Runners)
    | fix H: e              (Effect Fixing)
  v = c                     (Constants)
    | Œª n. e                (Abstractions)
  H = { (o ‚Üí Œª n. e), ... } (Interpretation Literals)
  C = ‚ñ°                     (Empty Contexts)
    | C e                   (Function Contexts)
    | v C                   (Argument Contexts)
    | do o C                (Invocation Contexts)
    | interpreter H: C      (Interpreter Contexts)
    | handler H: C          (Handler Contexts)
    | shallow H: C          (Shallow Interpreter Contexts)
    | runner H: C           (Runner Contexts)
    | fix H: C              (Fix Contexts)
#+end_example

* Functions and Constants
** Predefined Names

#+begin_example
  reflect, fwd ‚àà ùïÜ
#+end_example

** Handled-By Relation

#+begin_example
  o ~ H ‚áî ‚àÉ e, (o ‚Üí Œª n. e) ‚àà H
  o ‚âÅ H ‚áî ¬¨(o ~ H)
#+end_example

** Interpretation Union (right-prioritizing dictionary union)

#+begin_example
  {}                  ‚®Ü r = r
  {(o ‚Üí Œª n. e), ...} ‚®Ü r = ({...} ‚®Ü r)                  if o ~ r
                            ({...} ‚®Ü r) ‚à™ {(o ‚Üí Œª n. e)} otherwise
#+end_example

** Context Interpretation

#+begin_example
  handled(‚ñ°)                = ‚àÖ
  handled(C e)              = handled(C)
  handled(v C)              = handled(C)
  handled(do o C)           = handled(C)
  handled(interpreter H: C) = H ‚®Ü handled(C)
  handled(handler H: C)     = H ‚®Ü handled(C)
  handled(shallow H: C)     = H ‚®Ü handled(C)
  handled(runner H: C)      = H ‚®Ü handled(C)
  handled(fix H: C)         = H ‚®Ü handled(C)
#+end_example

* Semantics
** Œ≤-reduction

#+begin_example
  ------------------------------
    C[(Œª n. e) v] ‚áí C[e[n ‚Ü¶ v]]
#+end_example

** Interpreters over Values

#+begin_example
  ----------------------------
   C[interpreter H: v] ‚áí C[v]
#+end_example

** Interpreter Invocation

#+begin_example
         (o ‚Üí Œª n. e) ‚àà H                 o ‚âÅ handled(C‚ÇÇ)
  ------------------------------------------------------------------
   C‚ÇÅ[interpreter H: C‚ÇÇ[do o v] ‚áí C‚ÇÅ[interpreter H: C‚ÇÇ[(Œª n. e) v]]
#+end_example

** Shallow Interpreters over Values

#+begin_example
  ---------------------
   C[shallow H: v ‚áí v]
#+end_example

** Shallow Interpreter Invocation

#+begin_example
         (o ‚Üí Œª n. e) ‚àà H     o ‚âÅ handled(C‚ÇÇ)
  ---------------------------------------------------
     C‚ÇÅ[shallow H: C‚ÇÇ[do o v]] ‚áí C‚ÇÅ[C‚ÇÇ[(Œª n. e) v]]
#+end_example

** Fix over Values

#+begin_example
  --------------------
   C[fix H: v] ‚áí C[v]
#+end_example

** Fix Invocation

#+begin_example
             (o ‚Üí Œª n. e) ‚àà H            o ‚âÅ handled(C‚ÇÇ)
  -------------------------------------------------------------------
   C‚ÇÅ[fix H: C‚ÇÇ[do o v]] ‚áí C‚ÇÅ[fix H: C‚ÇÅ[interpreter H: (Œª n. e) v]]]
#+end_example

** Handlers over Values

#+begin_example
  ------------------------
   C[handler H: v] ‚áí C[v]
#+end_example

** Outermost Handlers

#+begin_example
   (o ‚Üí Œª n. e) ‚àà H    o ‚âÅ handled(C‚ÇÅ)    o ‚âÅ handled(C‚ÇÇ)
  -----------------------------------------------------------
   C‚ÇÅ[handler H: C‚ÇÇ[do o v]] ‚áí C‚ÇÅ[handler H: C‚ÇÇ[(Œª n. e) v]]
#+end_example

** Nested Handlers

#+begin_example
     (o ‚Üí Œª n‚ÇÅ. e‚ÇÅ) ‚àà H    (o ‚Üí Œª n‚ÇÇ. e‚ÇÇ) ‚àà handled(C‚ÇÅ)    o ‚âÅ handled(C‚ÇÇ)
  -------------------------------------------------------------------------------
   C‚ÇÅ[handler H: C‚ÇÇ[do o v]]
      ‚áí
   C‚ÇÅ[handler H: C‚ÇÇ[shallow {(fwd ‚Üí Œªn‚ÇÇ. e‚ÇÇ)}: (Œª n‚ÇÅ. e‚ÇÅ) v]]
#+end_example

** Runners over Values

#+begin_example
  -----------------------
   C[runner H: v] ‚áí C[v]
#+end_example

** Outermost Runners

#+begin_example
   H‚ÇÇ = handled(C‚ÇÅ), (o ‚Üí Œª n. e) ‚àà H‚ÇÅ, o ‚âÅ H‚ÇÇ, o ‚âÅ handled(C‚ÇÇ)
  --------------------------------------------------------------
   C‚ÇÅ[runner H‚ÇÅ: C‚ÇÇ[do o v]]
     ‚áí
   C‚ÇÅ[runner H‚ÇÅ: C‚ÇÇ[interpreter H‚ÇÇ: (Œª n. e) v]]
#+end_example

** Nested Runners

#+begin_example
   H‚ÇÇ = handled(C‚ÇÅ), (o ‚Üí Œª n‚ÇÅ. e‚ÇÅ) ‚àà H‚ÇÅ, o ~ H‚ÇÇ, o ‚âÅ handled(C‚ÇÇ)
  -----------------------------------------------------------------------------
   C‚ÇÅ[runner H‚ÇÅ: C‚ÇÇ[do o v]]
       ‚áí
   C‚ÇÅ[runner H‚ÇÅ:
       C‚ÇÇ[fix H‚ÇÇ:
           shallow {(reflect ‚Üí Œª n‚ÇÇ. interpreter H‚ÇÇ: do o n‚ÇÇ)}:
               (Œª n‚ÇÅ. e‚ÇÅ) v
       ]
   ]
#+end_example
 
* Example Derivations
** Simple Interpreter Usage

#+begin_example
    -----------------------------       --------------
    (o ‚Üí Œª n. e) ‚àà {(o ‚Üí Œª n. e)}       o ‚âÅ handled(‚ñ°)
  ------------------------------------------------------ [Interpreter Invocation]
     interpreter {(o ‚Üí Œª n. e)}: do o c ‚áí (Œª n. e) c
#+end_example

** Forwarding

#+begin_example
  handler {(get ‚Üí Œª n‚ÇÇ. 2)}:
      handler {(get ‚Üí Œª n‚ÇÅ. square (do fwd n‚ÇÅ))}:
          do get ()
  ‚áí [Nested Handlers] where
    C‚ÇÅ=(handler {(get ‚Üí Œª n. 2)}: ‚ñ°),
    C‚ÇÇ=‚ñ°,
    H={(get ‚Üí Œª n‚ÇÅ. (square (do fwd n‚ÇÅ)))},
    o=get,
    e‚ÇÅ=(square (do fwd n‚ÇÅ)),
    e‚ÇÇ=2
  handler {(get ‚Üí Œª n‚ÇÇ. 2)}:
      handler {(get ‚Üí Œª n‚ÇÅ. square (do fwd n‚ÇÅ))}:
          shallow {(fwd ‚Üí Œªn‚ÇÇ. 2)}:
              (Œª n‚ÇÅ. (square (do fwd n‚ÇÅ))) ()
  ‚áí [Œ≤-reduction] where
    C=(handler {...}: handler {...}: shallow {...}: ‚ñ°),
    n=n‚ÇÅ,
    v=(),
    e=(square (do fwd n‚ÇÅ))
  handler {(get ‚Üí Œª n‚ÇÇ. 2)}:
      handler {(get ‚Üí Œª n‚ÇÅ. square (do fwd n‚ÇÅ))}:
          shallow {(fwd ‚Üí Œªn‚ÇÇ. 2)}:
              (square (do fwd ()))
  ‚áí [Shallow Interpreter Invocation] where
    C‚ÇÅ=(handler {...}: handler: {...}: ‚ñ°),
    C‚ÇÇ=(square ‚ñ°)
    n=n‚ÇÇ,
    o=fwd,
    e=2
  handler {(get ‚Üí Œª n‚ÇÇ. 2)}:
      handler {(get ‚Üí Œª n‚ÇÅ. square (do fwd n‚ÇÅ))}:
          (square ((Œª n‚ÇÇ. 2) ()))
  ‚áí [Œ≤-reduction] where
    C=(handler {...}: handler {...}: (square ‚ñ°)),
    n=n‚ÇÇ,
    e=2,
    v=()
  handler {(get ‚Üí Œª n‚ÇÇ. 2)}:
      handler {(get ‚Üí Œª n‚ÇÅ. square (do fwd n‚ÇÅ))}:
          (square 2)
  ‚áí [Square Impl] where
    C=(handler {...}: handler {...}: ‚ñ°)
  handler {(get ‚Üí Œª n‚ÇÇ. 2)}:
      handler {(get ‚Üí Œª n‚ÇÅ. square (do fwd n‚ÇÅ))}:
          4
  ‚áí [Handlers over Values] where
    C=(handler {...}: ‚ñ°),
    H={...},
    v=4
  handler {(get ‚Üí Œª n‚ÇÇ. 2)}:
      4
  ‚áí [Handlers over Values] where
    C=‚ñ°,
    H={...},
    v=4
  4
#+end_example

** Nested Forwarding

#+begin_example
  handler {(get ‚Üí Œª n‚ÇÇ. 2)}:
      handler {(get ‚Üí Œª n‚ÇÅ. square (do fwd n‚ÇÅ))}:
          handler {(get ‚Üí Œª n‚ÇÄ. square (do fwd n‚ÇÄ))}:
              do get ()
  ‚áí [Nested Handlers]
  handler {(get ‚Üí Œª n‚ÇÇ. 2)}:
      handler {(get ‚Üí Œª n‚ÇÅ. square (do fwd n‚ÇÅ))}:
          handler {(get ‚Üí Œª n‚ÇÄ. square (do fwd n‚ÇÄ))}:
              shallow {(fwd ‚Üí Œªn‚ÇÅ. square (do fwd n‚ÇÅ))}:
                  (Œª n‚ÇÄ. square (do fwd n‚ÇÄ)) ()            
  ‚áí [Œ≤-reduction]
  handler {(get ‚Üí Œª n‚ÇÇ. 2)}:
      handler {(get ‚Üí Œª n‚ÇÅ. square (do fwd n‚ÇÅ))}:
          handler {(get ‚Üí Œª n‚ÇÄ. square (do fwd n‚ÇÄ))}:
              shallow {(fwd ‚Üí Œªn‚ÇÅ. square (do fwd n‚ÇÅ))}:
                  square (do fwd ()))
  ‚áí [Shallow Interpreter Invocation]
  handler {(get ‚Üí Œª n‚ÇÇ. 2)}:
      handler {(get ‚Üí Œª n‚ÇÅ. square (do fwd n‚ÇÅ))}:
          handler {(get ‚Üí Œª n‚ÇÄ. square (do fwd n‚ÇÄ))}:
              square ((Œªn‚ÇÅ. square (do fwd n‚ÇÅ)) ()))
  ‚áí [Œ≤-reduction]
  handler {(get ‚Üí Œª n‚ÇÇ. 2)}:
      handler {(get ‚Üí Œª n‚ÇÅ. square (do fwd n‚ÇÅ))}:
          handler {(get ‚Üí Œª n‚ÇÄ. square (do fwd n‚ÇÄ))}:
              square (square (do fwd ()))
  !!!STUCK!!!
#+end_example

